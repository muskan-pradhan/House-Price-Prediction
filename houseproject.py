# -*- coding: utf-8 -*-
"""HouseProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lWaJLDxpHFX0ZUPRaOXhRkdpbHbMTZW3
"""

# Data Collection
# Read the data 
import pandas as pd
data = pd.read_csv("Housing_Modified.csv")
data

# Correlation among independent variables and dependent variables
# Correlation - Measure to identify realationship between independent and dependent variables
data.corr()

# Preprocessing in Python
# Use a library known as sklearn.preprocessing
import sklearn.preprocessing as pp
lb = pp.LabelBinarizer()
data.driveway = lb.fit_transform(data.driveway)
data.recroom = lb.fit_transform(data.recroom)
data.fullbase = lb.fit_transform(data.fullbase)
data.gashw = lb.fit_transform(data.gashw)
data.airco = lb.fit_transform(data.airco)
data.prefarea = lb.fit_transform(data.prefarea)

# Converting N-categorical text values into numbers
lbe = pp.LabelEncoder()
data.stories = lbe.fit_transform(data.stories)

data.corr()

min_price = data["price"].min()
max_price = data["price"].max()
print("Min value of price is USD %d and max value of price is USD %d" % (min_price, max_price))

# Show the range of lotsize
min_lotsize = data["lotsize"].min()
max_lotsize = data.lotsize.max()
print("Min value of lotsize is %d sq mtr and max value of lotsize is %d sq mtr" % (min_lotsize, max_lotsize))

# Show the range of bedrooms
min_bedrooms = data.bedrooms.min()
max_bedrooms = data.bedrooms.max()
print("Min value of bedrooms is %d and max value is %d" % (min_bedrooms, max_bedrooms))

# Draw a graph of all the values in the current dataframe 
import matplotlib.pyplot as plt
data.plot()

# To solve the problem of different scale of independent variables.
# We need to use Transformation Techniques to prepare the data for analysis
# MinMax Scaling 

Xnorm = (data.price - min_price)/(max_price - min_price)
Xnorm

# Select the independent variables 
independent = data.columns

independent = independent.delete(0)
independent

data[independent].plot()

X = data[independent] # Consider X as representative of Independent variables
Xnorm = (X - X.min())/(X.max() - X.min())
Xnorm

# Plot the normalized data to see all observations in the dataset
Xnorm.corr()

#Set up the matplotlib figure
import seaborn as sns 

corr = data.corr()
size = max(10, len(corr.columns)/2.)
f, ax = plt.subplots(figsize=(size, size))

#Draw the heatmap with the mask and correct aspect ratio

sns.heatmap(corr, annot=True, square=True, linewidths=.5, cbar_kws={"shrink": 0.5}, ax=ax)

#Set up the matplotlib figure
import seaborn as sns 

corr = Xnorm.corr()
size = max(10, len(corr.columns)/2.)
f, ax = plt.subplots(figsize=(size, size))

#Draw the heatmap with the mask and correct aspect ratio

sns.heatmap(corr, annot=True, square=True, linewidths=.5, cbar_kws={"shrink": 0.5}, ax=ax)

#Normalization using MinMaxScaler library
from sklearn.preprocessing import MinMaxScaler # Normalization
from sklearn.preprocessing import StandardScaler # Standardization

mm = MinMaxScaler()
mm.fit_transform(data)

# Standardization = (X - mu) / sigma ----> ((X - Xmean) / Xstd)
Xstd = (X - X.mean()) / X.std()
Xstd

ss = StandardScaler()
Xstd = ss.fit_transform(X)
Xstd

# Implement the graphs using Dataiku 
import matplotlib.pyplot as plt
plt.scatter(data["lotsize"], data["price"], color="red")
plt.xlabel("Lotsize (in square meters)")
plt.ylabel("Price (in USD)")

plt.plot(sorted(data["lotsize"]),data["price"])
plt.scatter(sorted(data["lotsize"]),data["price"])
plt.xlabel("Lotsize")
plt.ylabel("Price")
plt.title("Comparison of Price with Lotsize")

# Machine Learning 
# Step 1 - Selection of Independent and Dependent variables
Y = data.price # Dependent variable
independent = data.columns
independent = independent.delete(0)
X = data[independent] # Independent variables

# Since the price is quantitative in nature, use regression equation (Y = mX + c)
import sklearn.linear_model as lm
model = lm.LinearRegression()

# Train the model
model = model.fit(X, Y)

# Objective of training the model with input dataset of dependent and independent variables
# is to calculate the attributes (slope, intercept), which can help in prediction of response
# variable
# Print the slope and intercept
print("The slope(m) of equation is", model.coef_)
print("The intercept/residue (c) is", model.intercept_)

# Predict using the model
Ypred = model.predict(X)

# Interpretation and Evaluation
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
r2 = r2_score(Y, Ypred)
print("The Rsquared value is", r2)

data["predicted_price"] = Ypred

data[["price", "lotsize", "predicted_price"]]

# Interpretation and Evaluation using Graphs
plt.scatter(data["price"], data["lotsize"], color="green")
plt.scatter(data["predicted_price"], data["lotsize"], color="red")
plt.xlabel("Price in USD")
plt.ylabel("Lotsize in Sq mtrs")
plt.title("Machine Learning with actual vs predicted")

# Compare the actual vs predicted model
plt.plot(sorted(data["price"]), data["lotsize"])
plt.plot(sorted(data["predicted_price"]), data["lotsize"])

# make a simple app which can predict price using the model
user_data = {}
for variable in independent:
  temp = input("Enter " + variable + ": ")
  user_data[variable] = temp

user_input = pd.DataFrame(data=user_data, index=[0], columns=independent)
pred_price = model.predict(user_input)
print("Predicted price of the house is USD", int(pred_price[0]))